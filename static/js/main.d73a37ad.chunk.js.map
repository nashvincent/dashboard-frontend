{"version":3,"sources":["services/api.js","components/Navbar.js","components/Dashboard.js","components/WordCloud.js","components/PieChart.js","components/SimpleLineChart.js","components/Analysis.js","App.js","serviceWorker.js","index.js"],"names":["BASE_URL","getInitialData","a","axios","get","response","data","getRandom","analyze","abst","post","abstract","console","log","train","uploadFile","file","formData","FormData","append","status","Navbar","className","to","Dashboard","handleNewCoherenceValues","handleNewWordcloudData","handleNewTopics","initialTopics","useState","input","setInput","undefined","colorizedText","setColorizedText","topicLayout","setTopicLayout","loading","setLoading","setFile","useEffect","getRandAbst","apiService","handleSubmit","window","scrollTo","topicLayout1","abst_input","slice","t","res","q","topics","find","e","parseFloat","toFixed","words","handleSubmitTrain","dat","topic_list","coherence_values","word_cloud_data","i","List","map","item","description","percentage","onSubmit","preventDefault","alert","style","marginTop","id","setTimeout","element","document","getElementById","word","idx","key","role","name","placeholder","rows","onDoubleClick","value","onChange","target","onClick","type","files","marginLeft","options","enableTooltip","deterministic","fontFamily","fontSizes","fontStyle","fontWeight","rotations","rotationAngles","scale","spiral","transitionDuration","WordCloud","wordcloudData","justifyContent","height","width","length","minSize","textAlign","renderActiveShape","props","RADIAN","Math","PI","cx","cy","midAngle","innerRadius","outerRadius","startAngle","endAngle","fill","payload","percent","sin","cos","sx","sy","mx","my","ex","ey","textAnchor","x","y","dy","d","stroke","r","CustomPiechart","getInitialState","activeIndex","onPieEnter","index","setState","state","this","activeShape","onMouseEnter","React","Component","CustomizedLabel","fontSize","CustomizedAxisTick","transform","SimpleLineChart","coherenceValues","margin","top","right","left","bottom","strokeDasharray","dataKey","tick","domain","valueList","obj","coherence_value","range","max","Number","toPrecision","min","push","getRange","label","Analysis","getRelevantTopics","topicList","trim","menuIsOpen","setMenuIsOpen","currentTopic","setCurrentTopic","show","menuItems","topic","href","substring","getFullTopic","PieChart","App","setCoherenceValues","setWordcloudData","setTopics","cV","fetchData","path","filter","values","Boolean","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"iUAEMA,EAAW,gCAEXC,EAAc,uCAAG,4BAAAC,EAAA,sEACEC,IAAMC,IAAN,UAAaJ,EAAb,aADF,cACfK,EADe,yBAEdA,EAASC,MAFK,2CAAH,qDAgCL,GAAEC,UA3BF,uCAAG,4BAAAL,EAAA,sEACOC,IAAMC,IAAN,UAAaJ,EAAb,mBADP,cACVK,EADU,yBAETA,EAASC,MAFA,2CAAH,qDA2BaE,QAtBf,uCAAG,WAAMC,GAAN,eAAAP,EAAA,sEACSC,IAAMO,KAAN,UAAcV,EAAd,YAAkC,CAAEW,SAAUF,IADvD,cACRJ,EADQ,OAEdO,QAAQC,IAAI,0CACZD,QAAQC,IAAIR,GAHE,kBAIPA,EAASC,MAJF,2CAAH,sDAsBwBQ,MAf1B,uCAAG,WAAML,GAAN,eAAAP,EAAA,sEACWC,IAAMO,KAAN,UAAcV,EAAd,UAAgC,CAAEW,SAAUF,IADvD,cACNJ,EADM,OAEZO,QAAQC,IAAI,mCACZD,QAAQC,IAAIR,EAASC,MAHT,kBAKLD,EAASC,MALJ,2CAAH,sDAeiCS,WAP5B,uCAAG,WAAMC,GAAN,iBAAAd,EAAA,6DACXe,EAAW,IAAIC,UACZC,OAAO,OAAQH,GAFP,SAGMb,IAAMO,KAAN,UAAcV,EAAd,WAAiCiB,GAHvC,cAGXZ,EAHW,yBAIVA,EAASe,QAJC,2CAAH,sDAOwCnB,kBCjBzCoB,EAhBA,WACb,OACE,yBAAKC,UAAU,iDACb,yBAAKA,UAAU,gBACb,kBAAC,IAAD,CAAMC,GAAG,KAAT,4BAGF,wBAAID,UAAU,sBACb,wBAAIA,UAAU,YACb,kBAAC,IAAD,CAAMC,GAAG,aAAT,gB,gBCuMOC,G,OA/MG,SAAC,GAKZ,IAJLC,EAII,EAJJA,yBACAC,EAGI,EAHJA,uBACAC,EAEI,EAFJA,gBACAC,EACI,EADJA,cACI,EACsBC,mBAAS,IAD/B,mBACGC,EADH,KACUC,EADV,OAEsCF,wBAASG,GAF/C,mBAEGC,EAFH,KAEkBC,EAFlB,OAGkCL,mBAASD,GAH3C,mBAGGO,EAHH,KAGgBC,EAHhB,OAI0BP,oBAAS,GAJnC,mBAIGQ,EAJH,KAIYC,EAJZ,OAKoBT,mBAAS,MAL7B,mBAKGb,EALH,KAKSuB,EALT,KAOJC,qBAAU,WACR5B,QAAQC,IAAI,WAAYe,GACxBQ,EAAeR,KACd,CAACA,IAEJ,IAAMa,EAAW,uCAAG,4BAAAvC,EAAA,sEACCwC,EAAWnC,YADZ,OACZE,EADY,OAElBsB,EAAStB,GACTG,QAAQC,IAAIiB,GAHM,2CAAH,qDAMXa,EAAY,uCAAG,oCAAAzC,EAAA,6DACnB0C,OAAOC,SAAS,EAAG,GACnBP,GAAW,GACPQ,EAHe,YAGIX,GACnBY,EAAajB,EAAMkB,MAAM,GAE7BjB,EAAS,IANU,SAQHW,EAAWlC,QAAQuC,GARhB,OAgBnB,IAASE,KARLC,EARe,OAUnBtC,QAAQC,IAAIqC,GAEZZ,GAAW,GAZQ,WAgBVW,GAEP,IAAIE,EAAID,EAAIE,OAAOC,MAAK,SAAAC,GAAC,OAAIA,EAAE,IAAML,KAInCH,EAAaG,GAAb,WADEE,EAC8BI,WAAkB,IAAPJ,EAAE,IAAUK,QAAQ,GAE/B,GARtBV,EAAe,EAApBG,GAWTf,EAAiBgB,EAAIO,OACrBrB,EAAeU,GACfnB,EAAgBmB,GA7BG,4CAAH,qDAgCZY,EAAiB,uCAAG,kCAAAxD,EAAA,6DACxBoC,GAAW,GADa,SAGRI,EAAW5B,QAHH,OAGpBoC,EAHoB,OAIxBtC,QAAQC,IAAIqC,GACRS,EAAMT,EAAIU,WAGdnC,EAAyByB,EAAIW,kBAC7BnC,EAAuBwB,EAAIY,iBAEvBC,EAAI,EACJC,EAAOL,EAAIM,KAAI,SAAAC,GAEjB,MAAO,CACLC,YAAY,SAAD,OAFbJ,GAAQ,EAEK,cAAkBG,GAC7BE,gBAAYpC,MAGhBpB,QAAQC,IAAImD,GAEZ1B,GAAW,GACXF,EAAe4B,GAtBS,4CAAH,qDAyBjBK,EAAQ,uCAAG,WAAMf,GAAN,SAAApD,EAAA,6DACfoD,EAAEgB,iBACF1D,QAAQC,IAAI,kBAFG,SAGC6B,EAAW3B,WAAWC,GAHvB,OAIL,MAJK,OAIAuD,MAAM,iBAChBA,MAAM,iBALI,2CAAH,sDAcd,OACE,yBAAKjD,UAAU,YAAYkD,MAAO,CAAEC,UAAW,SAE7C,yBAAKnD,UAAU,OACb,wBAAIA,UAAU,mCAAmCoD,GAAG,aACjDvC,EAAY8B,KAAI,SAAChB,EAAGc,GAAO,IAAD,EAOzB,OANAY,YAAW,WACT,IAAIC,EAAUC,SAASC,eAAT,eAAgCf,IAC9B,OAAZa,IACFA,EAAQtD,UAAR,2EAAwFyC,EAAxF,qBAVG,IAWOA,EAAI,KAGhB,2BACEzC,UAAU,gDADZ,0BAEa,6BAA+ByC,GAF5C,oBAGO,QAAUA,GAHjB,mBAIM,QAAUA,GAJhB,GAMGd,EAAEkB,YACH,6BACClB,EAAEmB,gBAOX,yBAAK9C,UAAU,8CAEZW,EACCA,EAAcgC,KAAI,SAACc,EAAMC,GACvB,OACE,0BACEC,IAAK,YAAcD,EACnB1D,UAAW,0BAA4ByD,EAAK,IAE3CA,EAAK,GACN,0BAAMzD,UAAU,cAAhB,SAKN,uBAAGA,UAAU,2BAAb,kCAMN,yBAAKA,UAAU,YACb,yBAAKA,UAAU,UACZe,GACC,yBAAKf,UAAU,0CAA0C4D,KAAK,UAC5D,0BAAM5D,UAAU,WAAhB,gBAKN,8BACE6D,KAAK,WACLT,GAAG,gBACHU,YAAY,gEACZ9D,UAAU,mCACV+D,KAAK,KACLC,cAAe,WACb7C,KAEF8C,MAAOzD,EACP0D,SAAU,SAAAlC,GACRvB,EAASuB,EAAEmC,OAAOF,UAUtB,yBAAKjE,UAAU,eACb,4BACEoE,QAAS/C,EACTrB,UAAU,oEAFZ,WAMA,4BACEoE,QAAShC,EACTpC,UAAU,oEAFZ,WAQJ,yBAAKA,UAAU,6BACb,0BAAM+C,SAAUA,GACd,wBAAI/C,UAAU,wBAAd,qBACA,6BACA,2BACEoD,GAAG,cACHiB,KAAK,OACLH,SA3GO,SAAAlC,GACff,EAAQe,EAAEmC,OAAOG,MAAM,IACvBhF,QAAQC,IAAIyC,EAAEmC,OAAOG,MAAM,KA0GnBtE,UAAU,gBAEZ,4BAAQqE,KAAK,SAASrE,UAAU,gBAAgBkD,MAAO,CAAEqB,WAAY,KAArE,oB,SCtLJC,EAAU,CAEdC,eAAe,EACfC,eAAe,EACfC,WAAY,SACZC,UAAW,CAAC,GAAI,IAChBC,UAAW,SACXC,WAAY,SAEZC,UAAW,EACXC,eAAgB,CAAC,EAAG,GACpBC,MAAO,MACPC,OAAQ,cACRC,mBAAoB,KAuBPC,EApBG,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAEnB,OADA/F,QAAQC,IAAI8F,GAEV,yBAAKnC,MAAO,CAAEoC,eAAgB,WAC5B,uBAAGtF,UAAU,6DAAb,wBAGA,yBAAKkD,MAAO,CAAEqC,OAAQ,IAAKC,MAAO,MACN,IAAzBH,EAAcI,OACb,kBAAC,IAAD,CAAgBjB,QAASA,EAASrC,MAAOkD,EAAeK,QAAS,CAAC,IAAK,OAEvE,wBAAIxC,MAAO,CAAEyC,UAAW,SAAUxC,UAAW,KAA7C,gC,4CCjCJyC,EAAoB,SAAAC,GACxB,IAAMC,EAASC,KAAKC,GAAK,IAEvBC,EAWEJ,EAXFI,GACAC,EAUEL,EAVFK,GACAC,EASEN,EATFM,SACAC,EAQEP,EARFO,YACAC,EAOER,EAPFQ,YACAC,EAMET,EANFS,WACAC,EAKEV,EALFU,SACAC,EAIEX,EAJFW,KACAC,EAGEZ,EAHFY,QAEAxC,GACE4B,EAFFa,QAEEb,EADF5B,OAEI0C,EAAMZ,KAAKY,KAAKb,EAASK,GACzBS,EAAMb,KAAKa,KAAKd,EAASK,GACzBU,EAAKZ,GAAMI,EAAc,IAAMO,EAC/BE,EAAKZ,GAAMG,EAAc,IAAMM,EAC/BI,EAAKd,GAAMI,EAAc,IAAMO,EAC/BI,EAAKd,GAAMG,EAAc,IAAMM,EAC/BM,EAAKF,EAA2B,IAArBH,GAAO,EAAI,GAAK,GAC3BM,EAAKF,EACLG,EAAaP,GAAO,EAAI,QAAU,MAExC,OACE,2BACE,0BAAMQ,EAAGnB,EAAIoB,EAAGnB,EAAIoB,GAAI,EAAGH,WAAW,SAASX,KAAMA,GAClDC,EAAQ5C,MAEX,kBAAC,IAAD,CACEoC,GAAIA,EACJC,GAAIA,EACJE,YAAaA,EACbC,YAAaA,EACbC,WAAYA,EACZC,SAAUA,EACVC,KAAMA,IAER,kBAAC,IAAD,CACEP,GAAIA,EACJC,GAAIA,EACJI,WAAYA,EACZC,SAAUA,EACVH,YAAaC,EAAc,EAC3BA,YAAaA,EAAc,GAC3BG,KAAMA,IAER,0BAAMe,EAAC,WAAMV,EAAN,YAAYC,EAAZ,YAAkBC,EAAlB,YAAwBC,EAAxB,YAA8BC,EAA9B,YAAoCC,GAAMM,OAAQhB,EAAMA,KAAK,SACpE,4BAAQP,GAAIgB,EAAIf,GAAIgB,EAAIO,EAAG,GAAIjB,KAAMA,EAAMgB,OAAO,SAClD,0BACEJ,EAAGH,EAA2B,IAArBL,GAAO,EAAI,GAAK,GACzBS,EAAGH,EACHC,WAAYA,EACZX,KAAK,QAJP,UAKKvC,EALL,QA8DSyD,E,kDAnDb,WAAY7B,GAAQ,IAAD,8BACjB,gBAMF8B,gBAAkB,WAChB,MAAO,CACLC,YAAa,IATE,EAanBC,WAAa,SAAC7I,EAAM8I,GAClB,EAAKC,SAAS,CACZH,YAAaE,KAbf,EAAKE,MAAQ,CACXJ,YAAa,GAHE,E,qDAqBjB,OADAtI,QAAQC,IAAI0I,KAAKpC,MAAM/D,QAErB,yBAAKoB,MAAO,CAAEoC,eAAgB,SAAUK,UAAW,mBACjD,uBAAG3F,UAAU,wDAAb,sBAICiI,KAAKpC,MAAM/D,OAAO2D,OAAS,EAC1B,kBAAC,IAAD,CAAUD,MAAO,IAAKD,OAAQ,KAC5B,kBAAC,IAAD,CACEqC,YAAaK,KAAKD,MAAMJ,YACxBM,YAAatC,EACb5G,KAAMiJ,KAAKpC,MAAM/D,OACjBmE,GAAI,IACJC,GAAI,IACJE,YAAa,GACbC,YAAa,GACbG,KAAK,UACL2B,aAAcF,KAAKJ,cAIvB,wBAAI3E,MAAO,CAAEyC,UAAW,SAAUxC,UAAW,KAA7C,kC,GA3CmBiF,IAAMC,WCvE7BC,EAAkB,SAAAzC,GAAU,IACxBuB,EAAwBvB,EAAxBuB,EAAGC,EAAqBxB,EAArBwB,EAAGG,EAAkB3B,EAAlB2B,OAAQvD,EAAU4B,EAAV5B,MACtB,OACE,0BAAMmD,EAAGA,EAAGC,EAAGA,EAAGC,IAAK,EAAGd,KAAMgB,EAAQe,SAAU,GAAIpB,WAAW,UAC9DlD,IAKDuE,EAAqB,SAAA3C,GAAU,IAC3BuB,EAAkBvB,EAAlBuB,EAAGC,EAAexB,EAAfwB,EAAGZ,EAAYZ,EAAZY,QAEd,OACE,uBAAGgC,UAAS,oBAAerB,EAAf,YAAoBC,EAApB,MACV,0BAAMD,EAAG,EAAGC,EAAG,EAAGC,GAAI,GAAIH,WAAW,MAAMX,KAAK,OAAOiC,UAAU,eAC9DhC,EAAQxC,SAiDFyE,EA3CS,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,gBAczB,OACE,yBAAKzF,MAAO,CAAEoC,eAAgB,WAC5B,uBAAGtF,UAAU,wDAAb,0BAIA,kBAAC,IAAD,CACEwF,MAAO,KACPD,OAAQ,IACRvG,KAAM2J,EACNC,OAAQ,CAAEC,IAAK,GAAIC,MAAO,GAAIC,KAAM,GAAIC,OAAQ,KAEhD,kBAAC,IAAD,CAAeC,gBAAgB,QAC/B,kBAAC,IAAD,CAAOC,QAAQ,aAAa3D,OAAQ,GAAI4D,KAAM,kBAAC,EAAD,QAE9C,kBAAC,IAAD,CAAO9E,KAAK,SAAS+E,OA1BV,WACf,IACMC,EAAYV,EAAgBhG,KAAI,SAAA2G,GAAG,OAAIA,EAAIC,mBAE7CC,EAAQ,GACRC,EAAMC,QAAQ3D,KAAK0D,IAAL,MAAA1D,KAAI,YAAQsD,IAJX,MAIoCM,YAAY,IAC/DC,EAAMF,QAAQ3D,KAAK6D,IAAL,MAAA7D,KAAI,YAAQsD,IALX,MAKoCM,YAAY,IAEnE,OADAH,EAAMK,KAAKD,EAAKH,GACTD,EAkB0BM,KAC7B,kBAAC,IAAD,MACA,kBAAC,IAAD,MACA,kBAAC,IAAD,CACEzF,KAAK,WACL6E,QAAQ,kBACR1B,OAAO,UACPuC,MAAO,kBAAC,EAAD,WCyBFC,EAhFE,SAAC,GAAgD,IAA9CrB,EAA6C,EAA7CA,gBAAiBtD,EAA4B,EAA5BA,cAAevD,EAAa,EAAbA,OAK5CmI,EAAoB,WACxB,IAAMC,EAAYpI,EAAOa,KAAI,SAAA2G,GAC3B,MAAO,CACLzF,KAAMyF,EAAIzG,YAAYnB,MAAM,EAAG,GAAGyI,OAClClG,MAAOyF,OAAOJ,EAAIxG,gBAItB,OADAxD,QAAQC,IAAI,aAAc2K,GACnBA,GAbsD,EAgB3B3J,oBAAS,GAhBkB,mBAgBxD6J,EAhBwD,KAgB5CC,EAhB4C,OAiBvB9J,oBAhBlB,WACpB,OAAO0J,IAAoB,MAFkC,mBAiBxDK,EAjBwD,KAiB1CC,EAjB0C,KAmBzDC,EAAOJ,EAAa,OAAS,GAC7BK,EAAYR,IAAoBtH,KAAI,SAAA+H,GAAK,OAC7C,uBACE1K,UAAU,gBACV2K,KAAK,IACLvG,QAAS,WACPmG,EAAgBG,GAChBL,GAAc,KAGfK,EAAM7G,SAYX,OACE,yBAAK7D,UAAU,YAAYkD,MAAO,CAAEC,UAAW,SAE7C,yBAAKnD,UAAU,OACb,yBAAKA,UAAU,SACb,wBAAIA,UAAU,yCAAd,cAIJ,yBAAKA,UAAU,YACb,yBAAKA,UAAU,6DACb,yBAAKA,UAAU,YACb,4BACEA,UAAU,oCACVqE,KAAK,SACLjB,GAAG,qBACHgB,QAAS,kBAAMiG,GAAeD,KAJhC,SAQA,yBAAKpK,UAAS,iCAA4BwK,IAASC,IAErD,kBAAC,EAAD,CAAWpF,cA9BE,WACnB,GAAsB,IAAlBvD,EAAO2D,OAAc,MAAO,GACpB3D,EAAOC,MAAK,SAAA2I,GAAK,OAAIJ,EAAazG,MAAQ6G,EAAM7H,YAAYnB,MAAM,EAAG,MAAjF,IACMgC,EAAMgG,OAAOY,EAAazG,KAAK+G,UAAU,IAAM,EAErD,OADAtL,QAAQC,IAAI,SAAU8F,EAAc3B,IAC7B2B,EAAc3B,GAyBWmH,MAG5B,yBAAK7K,UAAU,6DACb,kBAAC8K,EAAD,CAAUhJ,OAAQmI,QAItB,yBAAKjK,UAAU,iBACb,yBAAKA,UAAU,8DACb,kBAAC,EAAD,CAAiB2I,gBAAiBA,QCK7BoC,EA9DH,WAAO,IAAD,EAC8BxK,mBAAS,IADvC,mBACToI,EADS,KACQqC,EADR,OAE0BzK,mBAAS,IAFnC,mBAET8E,EAFS,KAEM4F,EAFN,OAGY1K,mBAAS,IAHrB,mBAGTuB,EAHS,KAGDoJ,EAHC,KAmChB,OAtBAhK,qBAAU,WACR5B,QAAQC,IAAI,MAAOuC,KAClB,CAACA,IAGJZ,qBAAU,WAAM,4CACd,8BAAAtC,EAAA,sEACqBwC,EAAWzC,iBADhC,OACQK,EADR,OAEEM,QAAQC,IAAIP,GACRmM,EAAKnM,EAAKsD,WAAWK,KAAI,SAAC2G,EAAK5F,GACjC,MAAO,CACLb,YAAY,SAAD,OAAWa,EAAM,EAAjB,cAAwB4F,GACnCxG,gBAAYpC,MAGhBwK,EAAUC,GACVH,EAAmBhM,EAAKuD,kBACxB0I,EAAiBjM,EAAKwD,iBAXxB,4CADc,uBAAC,WAAD,wBAcd4I,KACC,IAGD,kBAAC,IAAD,KACE,6BACE,kBAAC,EAAD,MAEA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,aACV,kBAAC,EAAD,CACE1C,gBAAiBA,EACjBtD,cAAeA,EACfvD,OAnCHA,EAAOwJ,QAAO,SAAAhC,GAAG,OAAIA,EAAIxG,WAAa,QAsCvC,kBAAC,IAAD,CAAOuI,KAAK,KACV,kBAAC,EAAD,CACE/K,cAAewB,EACf3B,yBA9CqB,SAAAoL,GAAM,OAAIP,EAAmBO,IA+ClDnL,uBA9CmB,SAAAmL,GAAM,OAAIN,EAAiBM,IA+C9ClL,gBA9CY,SAAAkL,GAAM,OAAIL,EAAUK,WChB1BC,QACW,cAA7BlK,OAAOmK,SAASC,UAEe,UAA7BpK,OAAOmK,SAASC,UAEhBpK,OAAOmK,SAASC,SAASC,MACvB,2D,cCVNC,IAASC,OAAO,kBAAC,EAAD,MAAStI,SAASC,eAAe,SD2H3C,kBAAmBsI,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL/M,QAAQ+M,MAAMA,EAAMC,c","file":"static/js/main.d73a37ad.chunk.js","sourcesContent":["import axios from 'axios'\r\n\r\nconst BASE_URL = 'https://196414905eb1.ngrok.io'\r\n\r\nconst getInitialData = async () => {\r\n  const response = await axios.get(`${BASE_URL}/initial`)\r\n  return response.data\r\n}\r\n\r\nconst getRandom = async () => {\r\n  const response = await axios.get(`${BASE_URL}/get_rand_abst`)\r\n  return response.data\r\n}\r\n\r\nconst analyze = async abst => {\r\n  const response = await axios.post(`${BASE_URL}/analyze`, { abstract: abst })\r\n  console.log('Axios API returned data after analysis')\r\n  console.log(response)\r\n  return response.data\r\n}\r\n\r\nconst train = async abst => {\r\n  const response = await axios.post(`${BASE_URL}/train`, { abstract: abst })\r\n  console.log('data returned by train function')\r\n  console.log(response.data)\r\n\r\n  return response.data\r\n}\r\n\r\nconst uploadFile = async file => {\r\n  const formData = new FormData()\r\n  formData.append('file', file)\r\n  const response = await axios.post(`${BASE_URL}/upload`, formData)\r\n  return response.status\r\n}\r\n\r\nexport default { getRandom, analyze, train, uploadFile, getInitialData }\r\n","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nconst Navbar = () => {\r\n  return (\r\n    <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\r\n      <div className=\"navbar-brand\">\r\n        <Link to='/'>Text Analysis Dashboard</Link>\r\n      </div>\r\n      \r\n      <ul className=\"navbar-nav ml-auto\">\r\n      \t<li className=\"nav-item\">\r\n      \t\t<Link to='/analysis'>Analysis</Link>\r\n      \t</li>\r\n      </ul>\r\n    </nav>\r\n  )\r\n}\r\n\r\nexport default Navbar\r\n","import React, { useState, useEffect } from 'react'\r\nimport apiService from '../services/api'\r\nimport '../App.css'\r\n\r\nconst Dashboard = ({\r\n  handleNewCoherenceValues,\r\n  handleNewWordcloudData,\r\n  handleNewTopics,\r\n  initialTopics,\r\n}) => {\r\n  const [input, setInput] = useState('')\r\n  const [colorizedText, setColorizedText] = useState(undefined)\r\n  const [topicLayout, setTopicLayout] = useState(initialTopics)\r\n  const [loading, setLoading] = useState(false)\r\n  const [file, setFile] = useState(null)\r\n\r\n  useEffect(() => {\r\n    console.log('DashInit', initialTopics)\r\n    setTopicLayout(initialTopics)\r\n  }, [initialTopics])\r\n\r\n  const getRandAbst = async () => {\r\n    const abst = await apiService.getRandom()\r\n    setInput(abst)\r\n    console.log(input)\r\n  }\r\n\r\n  const handleSubmit = async () => {\r\n    window.scrollTo(0, 0)\r\n    setLoading(true)\r\n    let topicLayout1 = [...topicLayout]\r\n    let abst_input = input.slice(0)\r\n\r\n    setInput('')\r\n\r\n    let res = await apiService.analyze(abst_input)\r\n\r\n    console.log(res)\r\n\r\n    setLoading(false)\r\n\r\n    //console.log(res)\r\n    //console.log(\"TYPE:\", typeof res.topics[0])\r\n    for (let t in topicLayout1) {\r\n      // t is the index for each element in the object topicLayout\r\n      let q = res.topics.find(e => e[0] == t) // This might break the function?\r\n\r\n      // console.log(q)\r\n      if (q) {\r\n        topicLayout1[t]['percentage'] = parseFloat(q[1] * 100).toFixed(2)\r\n      } else {\r\n        topicLayout1[t]['percentage'] = 0\r\n      }\r\n    }\r\n    setColorizedText(res.words)\r\n    setTopicLayout(topicLayout1)\r\n    handleNewTopics(topicLayout1)\r\n  }\r\n\r\n  const handleSubmitTrain = async () => {\r\n    setLoading(true)\r\n\r\n    let res = await apiService.train()\r\n    console.log(res)\r\n    var dat = res.topic_list\r\n\r\n    // Passes coherence values to parent component\r\n    handleNewCoherenceValues(res.coherence_values)\r\n    handleNewWordcloudData(res.word_cloud_data)\r\n\r\n    var i = 0\r\n    let List = dat.map(item => {\r\n      i = i + 1\r\n      return {\r\n        description: `Topic ${i} : ${item}`,\r\n        percentage: undefined,\r\n      }\r\n    })\r\n    console.log(List)\r\n\r\n    setLoading(false)\r\n    setTopicLayout(List)\r\n  }\r\n\r\n  const onSubmit = async e => {\r\n    e.preventDefault()\r\n    console.log('Submitted Form')\r\n    let res = await apiService.uploadFile(file)\r\n    if (res===200) alert(\"file uploaded\") \r\n    else alert(\"upload failed\")\r\n  }\r\n\r\n  const onChange = e => {\r\n    setFile(e.target.files[0])\r\n    console.log(e.target.files[0])\r\n  }\r\n\r\n  const animTime = 300\r\n  return (\r\n    <div className=\"container\" style={{ marginTop: '20px' }}>\r\n      {/* TOP PART TO ANALYZE GIVEN ABSTRACT */}\r\n      <div className=\"row\">\r\n        <ul className=\"col-12 list-inline col-lg-3 bg-0\" id=\"topicList\">\r\n          {topicLayout.map((t, i) => {\r\n            setTimeout(() => {\r\n              let element = document.getElementById(`topic${i}`)\r\n              if (element !== null)\r\n                element.className = `list-inline-item col-xs d-md-block topic-rel roundedBubble topic_${i} animateBubble`\r\n            }, animTime * i + 100)\r\n\r\n            return (\r\n              <li\r\n                className=\"list-inline-item col-xs d-md-block topic-rel\"\r\n                className={'invis roundedBubble topic_' + i}\r\n                key={'topic' + i}\r\n                id={'topic' + i}\r\n              >\r\n                {t.description}\r\n                <br />\r\n                {t.percentage}\r\n              </li>\r\n            )\r\n          })}\r\n        </ul>\r\n        {}\r\n\r\n        <div className=\"col-lg-9 col-12 bg-2 pt-2 pb-2 roundinator\">\r\n          {/* {colorizedText} */}\r\n          {colorizedText ? (\r\n            colorizedText.map((word, idx) => {\r\n              return (\r\n                <span\r\n                  key={'colorWord' + idx}\r\n                  className={'roundedHighlight topic_' + word[1]}\r\n                >\r\n                  {word[0]}\r\n                  <span className=\"colorSpace\"> </span>\r\n                </span>\r\n              )\r\n            })\r\n          ) : (\r\n            <p className=\"blockquote text-center \">Awaiting Document Submission</p>\r\n          )}\r\n        </div>\r\n      </div>\r\n\r\n      {/* ABSTRACT INPUT */}\r\n      <div className=\"row mt-5\">\r\n        <div className=\"col-12\">\r\n          {loading && (\r\n            <div className=\"spinner-grow text-light spinner-grow-lg\" role=\"status\">\r\n              <span className=\"sr-only\">Loading...</span>\r\n            </div>\r\n          )}\r\n        </div>\r\n\r\n        <textarea\r\n          name=\"abstract\"\r\n          id=\"abstractInput\"\r\n          placeholder=\"Input some data here or double click to get a random document\"\r\n          className=\"col-12 form-control form-rounded\"\r\n          rows=\"10\"\r\n          onDoubleClick={() => {\r\n            getRandAbst()\r\n          }}\r\n          value={input}\r\n          onChange={e => {\r\n            setInput(e.target.value)\r\n          }}\r\n        ></textarea>\r\n\r\n        {/*\r\n        <button onClick={() => getRandAbst()} className=\"btn btn-outline-light offset-1 col-1 roundButton\">\r\n          Random Abstract\r\n        </button>\r\n\t\t*/}\r\n\r\n        <div className=\"mt-4 col-12\">\r\n          <button\r\n            onClick={handleSubmit}\r\n            className=\"btn btn-success btn-lg col-4 offset-md-1 btn-space animateBubble\"\r\n          >\r\n            ANALYZE\r\n          </button>\r\n          <button\r\n            onClick={handleSubmitTrain}\r\n            className=\"btn btn-primary btn-lg col-4 offset-md-1 btn-space animateBubble\"\r\n          >\r\n            TRAIN\r\n          </button>\r\n        </div>\r\n      </div>\r\n      <div className=\"container-fluid mt-5 mb-5\">\r\n        <form onSubmit={onSubmit}>\r\n          <h1 className=\"text-left text-white\">Upload a CSV file</h1>\r\n          <br />\r\n          <input\r\n            id=\"upload-file\"\r\n            type=\"file\"\r\n            onChange={onChange}\r\n            className=\"roundinator\"\r\n          />\r\n          <button type=\"submit\" className=\"btn btn-light\" style={{ marginLeft: 50 }}>\r\n            Upload File\r\n          </button>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Dashboard\r\n","import React from 'react'\r\nimport ReactWordcloud from 'react-wordcloud'\r\n\r\n// const words = [\r\n//   { value: 264, text: 'investor' },\r\n//   { value: 149, text: 'investment' },\r\n//   { value: 141, text: 'stock' },\r\n//   { value: 136, text: 'sale' },\r\n//   { value: 133, text: 'bank' },\r\n//   { value: 123, text: 'growth' },\r\n//   { value: 113, text: 'industry' },\r\n//   { value: 108, text: 'rate' },\r\n//   { value: 106, text: 'analyst' },\r\n//   { value: 104, text: 'revenue' },\r\n//   { value: 135, text: 'financial' },\r\n//   { value: 133, text: 'firm' },\r\n//   { value: 132, text: 'consumer' },\r\n//   { value: 131, text: 'build' },\r\n// ]\r\n\r\nconst options = {\r\n  // colors: ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd', '#8c564b'],\r\n  enableTooltip: true,\r\n  deterministic: false,\r\n  fontFamily: 'roboto',\r\n  fontSizes: [10, 60],\r\n  fontStyle: 'normal',\r\n  fontWeight: 'normal',\r\n  //padding: 1.5,\r\n  rotations: 3,\r\n  rotationAngles: [0, 0],\r\n  scale: 'log', // scales = sqrt, log, linear\r\n  spiral: 'archimedean', // patterns = archimedean, rectangular\r\n  transitionDuration: 1000,\r\n}\r\n// TODO: Pass wordcloudData as props to ReactWordcloud\r\nconst WordCloud = ({ wordcloudData }) => {\r\n  console.log(wordcloudData)\r\n  return (\r\n    <div style={{ justifyContent: 'center' }}>\r\n      <p className=\"display-4 lead font-weight-light text-center gradientText\">\r\n        Topic-wise Breakdown\r\n      </p>\r\n      <div style={{ height: 400, width: 450 }}>\r\n        {wordcloudData.length !== 0 ? (\r\n          <ReactWordcloud options={options} words={wordcloudData} minSize={[400, 400]} />\r\n        ) : (\r\n          <h1 style={{ textAlign: 'center', marginTop: 50 }}>\r\n            Please analyze a document\r\n          </h1>\r\n        )}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default WordCloud\r\n","import React from 'react'\r\nimport { PieChart, Pie, Sector } from 'recharts'\r\n\r\nconst data = [\r\n  { name: 'Topic 2', value: 38.52 },\r\n  { name: 'Topic 3', value: 5.78 },\r\n  { name: 'Topic 4', value: 4.28 },\r\n  { name: 'Topic 5', value: 23.71 },\r\n  { name: 'Topic 7', value: 9.95 },\r\n  { name: 'Topic 10', value: 9.05 },\r\n  { name: 'Topic 11', value: 6.33 },\r\n  { name: 'Topic 13', value: 2.3 },\r\n]\r\n\r\nconst renderActiveShape = props => {\r\n  const RADIAN = Math.PI / 180\r\n  const {\r\n    cx,\r\n    cy,\r\n    midAngle,\r\n    innerRadius,\r\n    outerRadius,\r\n    startAngle,\r\n    endAngle,\r\n    fill,\r\n    payload,\r\n    percent,\r\n    value,\r\n  } = props\r\n  const sin = Math.sin(-RADIAN * midAngle)\r\n  const cos = Math.cos(-RADIAN * midAngle)\r\n  const sx = cx + (outerRadius + 10) * cos\r\n  const sy = cy + (outerRadius + 10) * sin\r\n  const mx = cx + (outerRadius + 30) * cos\r\n  const my = cy + (outerRadius + 30) * sin\r\n  const ex = mx + (cos >= 0 ? 1 : -1) * 22\r\n  const ey = my\r\n  const textAnchor = cos >= 0 ? 'start' : 'end'\r\n\r\n  return (\r\n    <g>\r\n      <text x={cx} y={cy} dy={8} textAnchor=\"middle\" fill={fill}>\r\n        {payload.name}\r\n      </text>\r\n      <Sector\r\n        cx={cx}\r\n        cy={cy}\r\n        innerRadius={innerRadius}\r\n        outerRadius={outerRadius}\r\n        startAngle={startAngle}\r\n        endAngle={endAngle}\r\n        fill={fill}\r\n      />\r\n      <Sector\r\n        cx={cx}\r\n        cy={cy}\r\n        startAngle={startAngle}\r\n        endAngle={endAngle}\r\n        innerRadius={outerRadius + 6}\r\n        outerRadius={outerRadius + 10}\r\n        fill={fill}\r\n      />\r\n      <path d={`M${sx},${sy}L${mx},${my}L${ex},${ey}`} stroke={fill} fill=\"none\" />\r\n      <circle cx={ex} cy={ey} r={10} fill={fill} stroke=\"none\" />\r\n      <text\r\n        x={ex + (cos >= 0 ? 1 : -1) * 12}\r\n        y={ey}\r\n        textAnchor={textAnchor}\r\n        fill=\"#333\"\r\n      >{`${value}%`}</text>\r\n    </g>\r\n  )\r\n}\r\n\r\nclass CustomPiechart extends React.Component {\r\n  constructor(props) {\r\n    super()\r\n    this.state = {\r\n      activeIndex: 0,\r\n    }\r\n  }\r\n\r\n  getInitialState = () => {\r\n    return {\r\n      activeIndex: 0,\r\n    }\r\n  }\r\n\r\n  onPieEnter = (data, index) => {\r\n    this.setState({\r\n      activeIndex: index,\r\n    })\r\n  }\r\n\r\n  render() {\r\n    console.log(this.props.topics)\r\n    return (\r\n      <div style={{ justifyContent: 'center', textAlign: '-webkit-center' }}>\r\n        <p className=\"display-4 font-weight-light text-center gradientText\">\r\n          Document Breakdown\r\n        </p>\r\n\r\n        {this.props.topics.length > 0 ? (\r\n          <PieChart width={400} height={400}>\r\n            <Pie\r\n              activeIndex={this.state.activeIndex}\r\n              activeShape={renderActiveShape}\r\n              data={this.props.topics}\r\n              cx={200}\r\n              cy={150}\r\n              innerRadius={60}\r\n              outerRadius={80}\r\n              fill=\"#8884d8\"\r\n              onMouseEnter={this.onPieEnter}\r\n            />\r\n          </PieChart>\r\n        ) : (\r\n          <h1 style={{ textAlign: 'center', marginTop: 90 }}>\r\n            Please analyze a document\r\n          </h1>\r\n        )}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default CustomPiechart\r\n","import React from 'react'\r\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend } from 'recharts'\r\n\r\nconst CustomizedLabel = props => {\r\n  const { x, y, stroke, value } = props\r\n  return (\r\n    <text x={x} y={y} dy={-4} fill={stroke} fontSize={10} textAnchor=\"middle\">\r\n      {value}\r\n    </text>\r\n  )\r\n}\r\n\r\nconst CustomizedAxisTick = props => {\r\n  const { x, y, payload } = props\r\n\r\n  return (\r\n    <g transform={`translate(${x},${y})`}>\r\n      <text x={0} y={0} dy={16} textAnchor=\"end\" fill=\"#666\" transform=\"rotate(-35)\">\r\n        {payload.value}\r\n      </text>\r\n    </g>\r\n  )\r\n}\r\n\r\nconst SimpleLineChart = ({ coherenceValues }) => {\r\n  //console.log(coherenceValues)\r\n\r\n  const getRange = () => {\r\n    const EDGE_RANGE = 0.0005\r\n    const valueList = coherenceValues.map(obj => obj.coherence_value)\r\n\r\n    let range = []\r\n    let max = Number((Math.max(...valueList) + EDGE_RANGE).toPrecision(4))\r\n    let min = Number((Math.min(...valueList) - EDGE_RANGE).toPrecision(4))\r\n    range.push(min, max)\r\n    return range\r\n  }\r\n\r\n  return (\r\n    <div style={{ justifyContent: 'center' }}>\r\n      <p className=\"display-4 font-weight-light text-center gradientText\">\r\n        Model Coherence Values\r\n      </p>\r\n\r\n      <LineChart\r\n        width={1050}\r\n        height={300}\r\n        data={coherenceValues}\r\n        margin={{ top: 20, right: 30, left: 20, bottom: 10 }}\r\n      >\r\n        <CartesianGrid strokeDasharray=\"3 3\" />\r\n        <XAxis dataKey=\"num_topics\" height={60} tick={<CustomizedAxisTick />} />\r\n        {/* todo make domain dynamic */}\r\n        <YAxis type=\"number\" domain={getRange()} />\r\n        <Tooltip />\r\n        <Legend />\r\n        <Line\r\n          type=\"monotone\"\r\n          dataKey=\"coherence_value\"\r\n          stroke=\"#8884d8\"\r\n          label={<CustomizedLabel />}\r\n        />\r\n      </LineChart>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default SimpleLineChart\r\n","import React, { useState } from 'react'\r\nimport WordCloud from './WordCloud'\r\nimport PieChart from './PieChart'\r\nimport SimpleLineChart from './SimpleLineChart'\r\n\r\nconst Analysis = ({ coherenceValues, wordcloudData, topics }) => {\r\n  const getFirstTopic = () => {\r\n    return getRelevantTopics()[0]\r\n  }\r\n\r\n  const getRelevantTopics = () => {\r\n    const topicList = topics.map(obj => {\r\n      return {\r\n        name: obj.description.slice(0, 8).trim(),\r\n        value: Number(obj.percentage),\r\n      }\r\n    })\r\n    console.log('Relevant: ', topicList)\r\n    return topicList\r\n  }\r\n\r\n  const [menuIsOpen, setMenuIsOpen] = useState(false)\r\n  const [currentTopic, setCurrentTopic] = useState(getFirstTopic)\r\n\r\n  const show = menuIsOpen ? 'show' : ''\r\n  const menuItems = getRelevantTopics().map(topic => (\r\n    <a\r\n      className=\"dropdown-item\"\r\n      href=\"#\"\r\n      onClick={() => {\r\n        setCurrentTopic(topic)\r\n        setMenuIsOpen(false)\r\n      }}\r\n    >\r\n      {topic.name}\r\n    </a>\r\n  ))\r\n\r\n  const getFullTopic = () => {\r\n    if (topics.length === 0) return []\r\n    let topic = topics.find(topic => currentTopic.name == topic.description.slice(0, 8))\r\n    const idx = Number(currentTopic.name.substring(6)) - 1\r\n    console.log('data: ', wordcloudData[idx])\r\n    return wordcloudData[idx]\r\n  }\r\n\r\n  return (\r\n    <div className=\"container\" style={{ marginTop: '20px' }}>\r\n      {/* Page Heading */}\r\n      <div className=\"row\">\r\n        <div className=\"col-6\">\r\n          <h1 className=\"page-header text-white display-2 ml-5\">Analysis</h1>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"row mt-5\">\r\n        <div className=\"col-5 bg-white mr-auto ml-auto shadow-lg p-3 mb-5 rounded\">\r\n          <div className=\"dropdown\">\r\n            <button\r\n              className=\"btn btn-secondary dropdown-toggle\"\r\n              type=\"button\"\r\n              id=\"dropdownMenuButton\"\r\n              onClick={() => setMenuIsOpen(!menuIsOpen)}\r\n            >\r\n              Topic\r\n            </button>\r\n            <div className={`dropdown-menu collapse ${show}`}>{menuItems}</div>\r\n          </div>\r\n          <WordCloud wordcloudData={getFullTopic()} />\r\n        </div>\r\n\r\n        <div className=\"col-5 bg-white ml-auto mr-auto shadow-lg p-3 mb-5 rounded\">\r\n          <PieChart topics={getRelevantTopics()} />\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"row mt-5 mb-5\">\r\n        <div className=\"col-12 bg-white mr-auto ml-auto shadow-lg p-3 mb-5 rounded\">\r\n          <SimpleLineChart coherenceValues={coherenceValues} />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Analysis\r\n","import React, { useState, useEffect } from 'react'\r\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom'\r\n\r\nimport apiService from './services/api'\r\nimport Navbar from './components/Navbar'\r\nimport Dashboard from './components/Dashboard'\r\nimport Analysis from './components/Analysis'\r\n\r\n// The plan: Add state to this component to store the incoming topic list, coherence values, etc\r\n\r\n// TODO: Write a useEffect hook to fetch data from the init end point and store the data in state\r\n// TODO: Remove hardcoded topicLayout from Dashboard state and instead pass topicLayout state from App to Dashboard as props\r\n// TODO: Pass topics to Dashboard as props and set that as its state\r\n\r\n// (Experimental)Proposal: Remove topics state from dashboard altogther, store topicLayout in topics state (in App component)\r\n\r\n// CURR TODO:\r\n//    Pass correct data to PieChart from Analysis\r\n//    Fix animation bug that crashes app\r\n//    Add dropdown selector in Analysis wordcloud to select a particular topic (Should be dynamic)\r\n\r\nconst App = () => {\r\n  const [coherenceValues, setCoherenceValues] = useState([])\r\n  const [wordcloudData, setWordcloudData] = useState([])\r\n  const [topics, setTopics] = useState([])\r\n\r\n  const handleNewCoherenceValues = values => setCoherenceValues(values)\r\n  const handleNewWordcloudData = values => setWordcloudData(values)\r\n  const handleNewTopics = values => setTopics(values)\r\n\r\n  const getFilteredTopics = () => {\r\n    return topics.filter(obj => obj.percentage > 1)\r\n  }\r\n\r\n  useEffect(() => {\r\n    console.log('App', topics)\r\n  }, [topics])\r\n\r\n  // Hook to fetch initial data\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      const data = await apiService.getInitialData()\r\n      console.log(data)\r\n      let cV = data.topic_list.map((obj, idx) => {\r\n        return {\r\n          description: `Topic ${idx + 1} : ${obj}`,\r\n          percentage: undefined,\r\n        }\r\n      })\r\n      setTopics(cV)\r\n      setCoherenceValues(data.coherence_values)\r\n      setWordcloudData(data.word_cloud_data)\r\n    }\r\n    fetchData()\r\n  }, [])\r\n\r\n  return (\r\n    <Router>\r\n      <div>\r\n        <Navbar />\r\n\r\n        <Switch>\r\n          <Route path=\"/analysis\">\r\n            <Analysis\r\n              coherenceValues={coherenceValues}\r\n              wordcloudData={wordcloudData}\r\n              topics={getFilteredTopics()}\r\n            />\r\n          </Route>\r\n          <Route path=\"/\">\r\n            <Dashboard\r\n              initialTopics={topics}\r\n              handleNewCoherenceValues={handleNewCoherenceValues}\r\n              handleNewWordcloudData={handleNewWordcloudData}\r\n              handleNewTopics={handleNewTopics}\r\n            />\r\n          </Route>\r\n        </Switch>\r\n      </div>\r\n    </Router>\r\n  )\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport App from './App'\r\nimport * as serviceWorker from './serviceWorker'\r\nimport 'bootstrap'\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\n\r\nReactDOM.render(<App />, document.getElementById('root'))\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister()\r\n"],"sourceRoot":""}